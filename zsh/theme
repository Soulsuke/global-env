###############################################################################
## Custom theme.                                                             ##
###############################################################################

# Prompt setup function.
# Sets up the variables needed to compose the prompt later on.
function prompt_nns_setup()
{
  # Local variables:
  # NOTE: the following are used elsewhere:
  #  - prompt_nns_hyphen -> prompt_nns_compose_top_prompt_line
  #  - prompt_l_paren -> prompt_nns_compose_top_prompt_line
  #  - prompt_r_paren -> prompt_nns_compose_top_prompt_line
  #  - prompt_l_quadr -> prompt_nns_compose_top_prompt_line
  #  - prompt_r_quadr -> prompt_nns_compose_top_prompt_line
  #  - prompt_gfx_bbox_to_mbox -> prompt_nns_precmd
  #  - prompt_line_1a -> prompt_nns_compose_top_prompt_line
  #  - prompt_line_1b -> prompt_nns_compose_top_prompt_line
  #  - prompt_line_1c -> prompt_nns_compose_top_prompt_line
  #  - prompt_line_2 -> prompt_nns_precmd
  local prompt_nns_tlc prompt_nns_mlc prompt_nns_blc
  NNS_TIMER_CONTROL=0
  NNS_TIMER_START=0
  NNS_TIMER_END=0
  NNS_TIMER_ELAPSED=0

  # Check for 8bit support:
  if [[ $1 == '8bit' ]]; then
    shift
    if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* ]]; then
      prompt_nns_tlc=$'\xe2\x94\x8c'
      prompt_nns_mlc=$'\xe2\x94\x9c'
      prompt_nns_blc=$'\xe2\x94\x94'
      prompt_nns_hyphen=$'\xe2\x94\x80'
    else
      prompt_nns_tlc=$'\xda'
      prompt_nns_mlc=$'\xc3'
      prompt_nns_blc=$'\xc0'
      prompt_nns_hyphen=$'\xc4'
    fi
  else
    prompt_nns_tlc='/'
    prompt_nns_mlc='|'
    prompt_nns_blc='\'
    prompt_nns_hyphen='-'
  fi

  # Parenthesis shortcuts:
  prompt_l_paren="%B%F{cyan}(%b"
  prompt_r_paren="%B%F{cyan})%b"
  prompt_l_quadr="%B%F{cyan}[%b"
  prompt_r_quadr="%B%F{cyan}]%b"

  # Stile for continuation/select/tracing:
  prompt_gfx_bbox_to_mbox=$'%{\e[A\r%}%B'
  prompt_gfx_bbox_to_mbox+="%F{${prompt_nanashi_color1}}${prompt_gfx_mlc}"
  prompt_gfx_bbox_to_mbox+="%b%F{${prompt_nanashi_color1}}${prompt_gfx_hyphen}"
  prompt_gfx_bbox_to_mbox+=$'%{\e[B%}'

  # Shortcut for the very start of the top prompt line:
  prompt_nns_tbox="%b%F{cyan}${prompt_nns_tlc}"

  # Left part of the top prompt line (USER@HOST:PWD):
  # NOTE: %~ instead of PWD to keep the actual ~
  prompt_line_1a="${prompt_nns_tbox}${prompt_nns_hyphen}${prompt_l_quadr}"
  prompt_line_1a+="${USER}%B@%b${HOST}%f%B:%F{green}%~"

  # Middle part of the top prompt line (DATE, TIME $?):
  prompt_line_1b="${prompt_l_quadr}%D{%Y-%m-%d, %H:%M:%S}"

  # Right part of the top prompt line (end):
  prompt_line_1c=" %(?.%B%F{green}●.%B%F{red}▲)"
  prompt_line_1c+="%b%f${prompt_r_quadr}${prompt_nns_hyphen}"
  prompt_line_1c+="${prompt_nns_hyphen}"

  # Bottom prompt line:
  prompt_line_2="%b%F{cyan}${prompt_nns_blc}${prompt_nns_hyphen}%b%F{cyan}"

  # Prompt character depending on the user:
  prompt_char="%(!.#.$)"

  # Ensures the real prompt-composing function will be called when needed:
  add-zsh-hook precmd prompt_nns_precmd
  add-zsh-hook preexec prompt_nns_preexec
}



# Obtains git data to display.
function prompt_nns_git_data()
{
  # Local variables:
  local porcelain porcelain_legend name reg cnt git_branch git_origin

  # Git checks:
  NNS_GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"
  NNS_GIT_REMOTE=""
  if [[ "" != ${NNS_GIT_BRANCH} ]]; then
    # Mark down the current remote:
    NNS_GIT_REMOTE="$(git remote 2> /dev/null)"

    # Make it bold and use the right color:
    prompt_git=" %F{magenta}%B${NNS_GIT_BRANCH}"

    # If we're on a bare repository notice the user:
    if [[ "true" == "$(git rev-parse --is-bare-repository)" ]]; then
      prompt_git+=" %F{yellow}bare"

    # Otherwise get the repo's data:
    else
      # Fetch data via git porcelain:
      porcelain="$(git status --porcelain 2>/dev/null)"

      # And only add it in if the command exited successfully:
      if (( 0 == ? )); then
        # Porcelain data to show:
        typeset -A porcelain_legend=(
          [modified]="^.M"
          [deleted]="^.D"
          [added]="^A."
          [untracked]="^??"
          [uncommitted]="^[MR]"
        )

        # Iterate over the data to show:
        for name reg in ${(kv)porcelain_legend}; do
          cnt="$(grep $reg <<< $porcelain | wc -l)"
          if [[ 0 < $cnt ]]; then
            prompt_git+=" %F{yellow}$name:$cnt"
          fi
        done

        # Check for stashed data:
        if [[ "" != "$(git stash list)" ]]; then
          prompt_git+=" %F{yellow}stashed"
        fi

        # If there are no remote repositories set, show a notice:
        if [[ "" == "${NNS_GIT_REMOTE}" ]]; then
          prompt_git+=" %F{blue}no_remotes"

        # Otherwise:
        else
          local shorthand="${NNS_GIT_REMOTE}/${NNS_GIT_BRANCH}"

          # Check for unpushed commits:
          if [[
            "" != "$(git log ${shorthand}..HEAD 2&> /dev/null)" || 0 != $?
          ]]
          then
            prompt_git+=" %F{blue}to_push"

          # Otherwise check if we are ahead:
          elif [[ "" != $(git status | grep "Your branch is ahead of") ]]; then
            prompt_git+=" %F{blue}ahead"
          fi
        fi

       # Otherwise, show an indicator we can't show the info (most likely we're
       # inside the .git folder):
       else
         prompt_git+=" %F{yellow}<.git>"
      fi
    fi

    # Bold not needed anymore:
    prompt_git+="%b"
  fi
}



# Dynamic padding composer.
# $1 = padding length.
function prompt_nns_padding()
{
  eval "printf \${(l:${1}::${prompt_nns_hyphen}:)_empty_zz}"
}



# Returns the length of a string, without the color codes.
function prompt_nns_length_of()
{
  print "${#${(S%%)1//(\%([KF1]|)\{*\}|\%[Bbkf])}}"
}



# Composes the top prompt line for the current terminal width.
function prompt_nns_compose_top_prompt_line()
{
  # Local variables:
  local prompt_git prompt_line_1a_git prompt_line_1a_w \
    prompt_line_1b_w prompt_line_1c_w \
    prompt_line_1_timer prompt_line_1_timer_w \
    prompt_padding_size prompt_padding

  # Add eventual git data::
  prompt_nns_git_data
  prompt_line_1a_git="${prompt_line_1a}${prompt_git}${prompt_r_quadr}"
  prompt_line_1a_git+="${prompt_nns_hyphen}"
  prompt_line_1_timer=""
  if [[ 1 == ${NNS_TIMER_CONTROL} ]]; then
    prompt_line_1_timer=" %b%F{green}${NNS_TIMER_ELAPSED}ms"
  fi

  # Calculate some widths:
  prompt_line_1a_git_w=$(prompt_nns_length_of $prompt_line_1a_git)
  prompt_line_1a_w=$(prompt_nns_length_of $prompt_line_1a)

  # Everything can fit and there's some extra space to fill with padding:
  prompt_padding_size=$(( COLUMNS - prompt_line_1a_git_w -
                          $(prompt_nns_length_of $prompt_line_1b) -
                          $(prompt_nns_length_of $prompt_line_1c) -
                          $(prompt_nns_length_of $prompt_line_1_timer)
                      ))
  if [[ $prompt_padding_size -ge 0 ]]; then
    prompt_line_1="${prompt_line_1a_git}"
    prompt_line_1+="$(prompt_nns_padding ${prompt_padding_size})"
    prompt_line_1+="${prompt_line_1b}${prompt_line_1_timer}${prompt_line_1c}"
    return
  fi

  # If it won't fit let's try taking out the right part of the prompt,
  # giving priority to the long USER@HOST:PWD GIT part:
  prompt_padding_size=$(( COLUMNS - prompt_line_1a_git_w ))
  if [[ $prompt_padding_size -ge 0 ]]; then
    prompt_line_1="${prompt_line_1a_git}"
    prompt_line_1+="$(prompt_nns_padding ${prompt_padding_size})"
    return
  fi

  # If we're still here, also take out the GIT part:
  prompt_padding_size=$(( COLUMNS - prompt_line_1a_w - 2 ))
  if [[ $prompt_padding_size -ge 0 ]]; then
    prompt_line_1="${prompt_line_1a}${prompt_r_quadr}${prompt_nns_hyphen}"
    prompt_line_1+="$(prompt_nns_padding ${prompt_padding_size})"
    return
  fi

  # If we're still in trouble, let's go for only USER:PWD:
  local prompt_info_max_size=$(( COLUMNS - 5 ))
  local prompt_info_separator="%b%f%B:%F{green}%B"
  local prompt_info_line="${USER}${prompt_info_separator}${PWD}"
  local prompt_info_line_w=$(prompt_nns_length_of $prompt_info_line)

  # If the line is too long, attempt to shorten PWD:
  if [[ $prompt_info_line_w -gt $prompt_info_max_size ]] &&
     [[ "${PWD}" != "/" ]]
  then
    prompt_info_line="${USER}${prompt_info_separator}${PWD/*\//.../}"
    prompt_info_line_w=$(prompt_nns_length_of $prompt_info_line)
  fi

  # If it's still too long, remove the user:
  if [[ $prompt_info_line_w -gt $prompt_info_max_size ]]; then
    prompt_info_line="${prompt_info_line/${USER}:/}"
    prompt_info_line_w=$(prompt_nns_length_of $prompt_info_line)
  fi

  # If it's still too long:
  if [[ $#prompt_info_line -gt $prompt_info_max_size ]]; then
    prompt_info_line="%F{green}%B..."
    prompt_info_line_w=$(prompt_nns_length_of $prompt_info_line)
  fi

  # Recalculate the padding:
  prompt_padding_size=$((prompt_info_max_size - prompt_info_line_w))
  prompt_line_1="${prompt_nns_tbox}${prompt_nns_hyphen}${prompt_l_quadr}"
  prompt_line_1+="%F{cyan}${prompt_info_line}"
  prompt_line_1+="%b%f${prompt_r_quadr}"
  prompt_line_1+="$(prompt_nns_padding ${prompt_padding_size})"
  prompt_line_1+="${prompt_nns_hyphen}"
}



# Needed for a working timer.
function prompt_nns_preexec()
{
  NNS_TIMER_CONTROL=1
  NNS_TIMER_START=$(($(date +%s%0N)/1000000))
}



# Composes the prompt putting everything together.
function prompt_nns_precmd()
{
  # Timer only if needed:
  if [[ 1 == ${NNS_TIMER_CONTROL} ]]; then
    NNS_TIMER_END=$(($(date +%s%0N)/1000000))
    NNS_TIMER_ELAPSED=$(( ${NNS_TIMER_END} - ${NNS_TIMER_START} ))
  fi

  # Local variables:
  local prompt_line_1

  # May as well keep these:
  setopt noxtrace localoptions extendedglob

  # Input text stype:
  zle_highlight[(r)default:*]="default:fg=green,bold"

  # Compose the top prompt line:
  prompt_nns_compose_top_prompt_line

  # Set the tab's title:
  print -Pn "\e]0;${USER}@${HOST}:%~\a"

  # PS1, default prompt start:
  PS1="${prompt_line_1}${prompt_newline}${prompt_line_2}%B"

  # Add in venv info if available AND the console is large enough:
  if [[ ! -z ${VIRTUAL_ENV} ]] && [[ ${COLUMNS} -gt 20 ]]; then
    PS1+="(%F{yellow}venv: ${VIRTUAL_ENV}%F{cyan})"
  fi

  # PS1 default end:
  PS1+="%F{white}${prompt_char} %b%f%k"

  # PS2, continuation interactive prompt:
  PS2="${prompt_line_2}${prompt_gfx_bbox_to_mbox}%B%F{white}%_> %b%f%k"

  # PS3, select:
  PS3="${prompt_line_2}${prompt_gfx_bbox_to_mbox}%B%F{white}?# %b%f%k"

  # PS4, tracing:
  PS4="${prompt_line_2}${prompt_gfx_bbox_to_mbox}%B%F{white} %N.%i >"

  # Reset this:
  NNS_TIMER_CONTROL=0
}



# Since we got here, setup the prompt:
prompt_nns_setup "$@"

