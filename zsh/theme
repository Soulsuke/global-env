###############################################################################
## Custom theme.                                                             ##
###############################################################################

# Prompt setup function.
# Sets up the variables needed to compose the prompt later on.
function prompt_nns_setup()
{
  # Local variables:
  # NOTE: the following are used elsewhere:
  #  - PROMPT_NNS_HYPHEN -> prompt_nns_compose_top_prompt_line
  #  - PROMPT_L_PAREN -> prompt_nns_compose_top_prompt_line
  #  - PROMPT_R_PAREN -> prompt_nns_compose_top_prompt_line
  #  - PROMPT_L_QUADR -> prompt_nns_compose_top_prompt_line
  #  - PROMPT_R_QUADR -> prompt_nns_compose_top_prompt_line
  #  - PROMPT_NNS_BBOX_TO_MBOX -> prompt_nns_precmd
  #  - PROMPT_LINE_1A -> prompt_nns_compose_top_prompt_line
  #  - PROMPT_LINE_1B -> prompt_nns_compose_top_prompt_line
  #  - PROMPT_LINE_1C -> prompt_nns_compose_top_prompt_line
  #  - PROMPT_LINE_2 -> prompt_nns_precmd
  #  - PROMPT_NSS_TIMER_CTRL -> prompt_nns_precmd
  #                             prompt_nns_compose_top_prompt_line
  #                             prompt_nns_preexec
  #                             prompt_nns_precmd
  #  - PROMPT_NSS_TIMER_START -> prompt_nns_preexec
  #                              prompt_nns_precmd
  #  - PROMPT_NSS_TIMER_ELAPSED -> prompt_nns_precmd
  #                                prompt_nns_compose_top_prompt_line
  local PROMPT_NNS_TLC PROMPT_NNS_MLC PROMPT_NNS_BLC

  # These must start at 0 or the timer will break:
  PROMPT_NSS_TIMER_CTRL=0
  PROMPT_NSS_TIMER_START=0
  PROMPT_NSS_TIMER_ELAPSED=0

  # Check for 8bit support:
  if [[ $1 == '8bit' ]]; then
    shift
    if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* ]]; then
      PROMPT_NNS_TLC=$'\xe2\x94\x8c'
      PROMPT_NNS_MLC=$'\xe2\x94\x9c'
      PROMPT_NNS_BLC=$'\xe2\x94\x94'
      PROMPT_NNS_HYPHEN=$'\xe2\x94\x80'
    else
      PROMPT_NNS_TLC=$'\xda'
      PROMPT_NNS_MLC=$'\xc3'
      PROMPT_NNS_BLC=$'\xc0'
      PROMPT_NNS_HYPHEN=$'\xc4'
    fi
  else
    PROMPT_NNS_TLC='/'
    PROMPT_NNS_MLC='|'
    PROMPT_NNS_BLC='\'
    PROMPT_NNS_HYPHEN='-'
  fi

  # Parenthesis shortcuts:
  PROMPT_L_PAREN="%B%F{cyan}(%b"
  PROMPT_R_PAREN="%B%F{cyan})%b"
  PROMPT_L_QUADR="%B%F{cyan}[%b"
  PROMPT_R_QUADR="%B%F{cyan}]%b"

  # Stile for continuation/select/tracing:
  PROMPT_NNS_BBOX_TO_MBOX=$'%{\e[A\r%}'
  PROMPT_NNS_BBOX_TO_MBOX+="%B%F{cyan}${PROMPT_NNS_MLC}${PROMPT_NNS_HYPHEN}"
  PROMPT_NNS_BBOX_TO_MBOX+=$'%{\e[B%}'

  # Shortcut for the very start of the top prompt line:
  PROMPT_NNS_TBOX="%b%F{cyan}${PROMPT_NNS_TLC}"

  # Left part of the top prompt line (USER@HOST:PWD):
  # NOTE: %~ instead of PWD to keep the actual ~
  PROMPT_LINE_1A="${PROMPT_NNS_TBOX}${PROMPT_NNS_HYPHEN}${PROMPT_L_QUADR}"
  PROMPT_LINE_1A+="${USER}%B@%b${HOST}%f%B:%F{green}%~"

  # Middle part of the top prompt line (DATE, TIME $?):
  PROMPT_LINE_1B="${PROMPT_L_QUADR}%D{%Y-%m-%d, %H:%M:%S}"

  # Right part of the top prompt line (end):
  PROMPT_LINE_1C=" %(?.%B%F{green}●.%B%F{red}▲)"
  PROMPT_LINE_1C+="%b%f${PROMPT_R_QUADR}${PROMPT_NNS_HYPHEN}"
  PROMPT_LINE_1C+="${PROMPT_NNS_HYPHEN}"

  # Bottom prompt line:
  PROMPT_LINE_2="%b%F{cyan}${PROMPT_NNS_BLC}${PROMPT_NNS_HYPHEN}%b%F{cyan}"

  # Prompt character depending on the user:
  PROMPT_CHAR="%(!.#.$)"

  # Ensures the real prompt-composing function will be called when needed:
  add-zsh-hook precmd prompt_nns_precmd
  add-zsh-hook preexec prompt_nns_preexec
}



# Obtains git data to display.
function prompt_nns_git_data()
{
  # Fetch git root:
  local GIT_ROOT=$(git rev-parse --show-toplevel 2> /dev/null)

  # Do nothing if this is empty (not a git repo or git isn't available):
  [[ -z "${GIT_ROOT}" ]] && return

  # Local variables:
  local PORCELAIN PORCELAIN_LEGEND NAME REG CNT GIT_BRANCH GIT_ORIGIN GITATTR

  # Set this variable:
  GITATTR="${GIT_ROOT}/.gitattributes"

  # Git checks:
  local NNS_GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"
  local NNS_GIT_REMOTE=""
  if [[ "" != ${NNS_GIT_BRANCH} ]]; then
    # Mark down the current remote:
    NNS_GIT_REMOTE="$(git remote 2> /dev/null)"

    # Make it bold and use the right color:
    PROMPT_GIT=" %F{magenta}%B${NNS_GIT_BRANCH}"

    # If we're on a bare repository notice the user:
    if [[ "true" == "$(git rev-parse --is-bare-repository)" ]]; then
      PROMPT_GIT+=" %F{yellow}bare"

    # If this repository uses LFS, do not even think about using git status:
    elif [[ ! -z "$(grep "=lfs\s" "${GITATTR}" 2> /dev/null)" ]]; then
      PROMPT_GIT+=" %F{yellow}lfs"

    # Otherwise get the repo's data:
    else
      # Fetch data via git porcelain:
      PORCELAIN="$(git status --porcelain 2>/dev/null)"

      # And only add it in if the command exited successfully:
      if (( 0 == ? )); then
        # Porcelain data to show:
        typeset -A PORCELAIN_LEGEND=(
          [modified]="^.M"
          [deleted]="^.D"
          [added]="^A."
          [untracked]="^??"
          [uncommitted]="^[MR]"
        )

        # Iterate over the data to show:
        for NAME REG in ${(kv)PORCELAIN_LEGEND}; do
          CNT="$(grep ${REG} <<< ${PORCELAIN} | wc -l)"
          if [[ 0 < ${CNT} ]]; then
            PROMPT_GIT+=" %F{yellow}${NAME}:${CNT}"
          fi
        done

        # Check for stashed data:
        if [[ "" != "$(git stash list)" ]]; then
          PROMPT_GIT+=" %F{yellow}stashed"
        fi

        # If there are no remote repositories set, show a notice:
        if [[ "" == "${NNS_GIT_REMOTE}" ]]; then
          PROMPT_GIT+=" %F{blue}no_remotes"

        # Otherwise:
        else
          local shorthand="${NNS_GIT_REMOTE}/${NNS_GIT_BRANCH}"

          # Check for unpushed commits:
          if [[
            "" != "$(git log ${shorthand}..HEAD 2&> /dev/null)" || 0 != $?
          ]]
          then
            PROMPT_GIT+=" %F{blue}to_push"

          # Otherwise check if we are ahead:
          elif [[ "" != $(git status | grep "Your branch is ahead of") ]]; then
            PROMPT_GIT+=" %F{blue}ahead"
          fi
        fi

       # Otherwise, show an indicator we can't show the info (most likely we're
       # inside the .git folder):
       else
         PROMPT_GIT+=" %F{yellow}<.git>"
      fi
    fi

    # Bold not needed anymore:
    PROMPT_GIT+="%b"
  fi
}



# Dynamic padding composer.
# $1 = padding length.
function prompt_nns_padding()
{
  eval "printf \${(l:${1}::${PROMPT_NNS_HYPHEN}:)_empty_zz}"
}



# Returns the length of a string, without the color codes.
function prompt_nns_length_of()
{
  print "${#${(S%%)1//(\%([KF1]|)\{*\}|\%[Bbkf])}}"
}



# Composes the top prompt line for the current terminal width.
function prompt_nns_compose_top_prompt_line()
{
  # Local variables:
  local PROMPT_GIT PROMPT_LINE_1A_GIT PROMPT_LINE_1A_W \
    PROMPT_LINE_1B_W PROMPT_LINE_1C_W \
    PROMPT_LINE_1_TIMER PROMPT_LINE_1_TIMER_W \
    PROMPT_PADDING_SIZE PROMPT_PADDING

  # Add eventual git data::
  prompt_nns_git_data
  PROMPT_LINE_1A_GIT="${PROMPT_LINE_1A}${PROMPT_GIT}${PROMPT_R_QUADR}"
  PROMPT_LINE_1A_GIT+="${PROMPT_NNS_HYPHEN}"
  PROMPT_LINE_1_TIMER=""
  if [[ 1 == ${PROMPT_NSS_TIMER_CTRL} ]]; then
    PROMPT_LINE_1_TIMER=" %b%F{green}${PROMPT_NSS_TIMER_ELAPSED}ms"
  fi

  # Calculate some widths:
  PROMPT_LINE_1A_GIT_W=$(prompt_nns_length_of ${PROMPT_LINE_1A_GIT})
  PROMPT_LINE_1A_W=$(prompt_nns_length_of ${PROMPT_LINE_1A})

  # Everything can fit and there's some extra space to fill with padding:
  PROMPT_PADDING_SIZE=$(( COLUMNS - PROMPT_LINE_1A_GIT_W -
                          $(prompt_nns_length_of ${PROMPT_LINE_1B}) -
                          $(prompt_nns_length_of ${PROMPT_LINE_1C}) -
                          $(prompt_nns_length_of ${PROMPT_LINE_1_TIMER})
                      ))
  if [[ ${PROMPT_PADDING_SIZE} -ge 0 ]]; then
    PROMPT_LINE_1="${PROMPT_LINE_1A_GIT}"
    PROMPT_LINE_1+="$(prompt_nns_padding ${PROMPT_PADDING_SIZE})"
    PROMPT_LINE_1+="${PROMPT_LINE_1B}${PROMPT_LINE_1_TIMER}${PROMPT_LINE_1C}"
    return
  fi

  # If it won't fit let's try taking out the right part of the prompt,
  # giving priority to the long USER@HOST:PWD GIT part:
  PROMPT_PADDING_SIZE=$(( COLUMNS - PROMPT_LINE_1A_GIT_W ))
  if [[ ${PROMPT_PADDING_SIZE} -ge 0 ]]; then
    PROMPT_LINE_1="${PROMPT_LINE_1A_GIT}"
    PROMPT_LINE_1+="$(prompt_nns_padding ${PROMPT_PADDING_SIZE})"
    return
  fi

  # If we're still here, also take out the GIT part:
  PROMPT_PADDING_SIZE=$(( COLUMNS - PROMPT_LINE_1A_W - 2 ))
  if [[ ${PROMPT_PADDING_SIZE} -ge 0 ]]; then
    PROMPT_LINE_1="${PROMPT_LINE_1A}${PROMPT_R_QUADR}${PROMPT_NNS_HYPHEN}"
    PROMPT_LINE_1+="$(prompt_nns_padding ${PROMPT_PADDING_SIZE})"
    return
  fi

  # If we're still in trouble, let's go for only USER:PWD:
  local PROMPT_INFO_MAX_SIZE=$(( COLUMNS - 5 ))
  local PROMPT_INFO_SEPARATOR="%b%f%B:%F{green}%B"
  local PROMPT_INFO_LINE="${USER}${PROMPT_INFO_SEPARATOR}${PWD}"
  local PROMPT_INFO_LINE_W=$(prompt_nns_length_of ${PROMPT_INFO_LINE})

  # If the line is too long, attempt to shorten PWD:
  if [[ ${PROMPT_INFO_LINE_W} -gt ${PROMPT_INFO_MAX_SIZE} ]] &&
     [[ "${PWD}" != "/" ]]
  then
    PROMPT_INFO_LINE="${USER}${PROMPT_INFO_SEPARATOR}${PWD/*\//.../}"
    PROMPT_INFO_LINE_W=$(prompt_nns_length_of ${PROMPT_INFO_LINE})
  fi

  # If it's still too long, remove the user:
  if [[ ${PROMPT_INFO_LINE_W} -gt ${PROMPT_INFO_MAX_SIZE} ]]; then
    PROMPT_INFO_LINE="${PROMPT_INFO_LINE/${USER}:/}"
    PROMPT_INFO_LINE_W=$(prompt_nns_length_of ${PROMPT_INFO_LINE})
  fi

  # If it's still too long:
  if [[ ${PROMPT_INFO_LINE_W} -gt ${PROMPT_INFO_MAX_SIZE} ]]; then
    PROMPT_INFO_LINE="%F{green}%B..."
    PROMPT_INFO_LINE_W=$(prompt_nns_length_of ${PROMPT_INFO_LINE})
  fi

  # Recalculate the padding:
  PROMPT_PADDING_SIZE=$(( PROMPT_INFO_MAX_SIZE - PROMPT_INFO_LINE_W ))
  PROMPT_LINE_1="${PROMPT_NNS_TBOX}${PROMPT_NNS_HYPHEN}${PROMPT_L_QUADR}"
  PROMPT_LINE_1+="%F{cyan}${PROMPT_INFO_LINE}"
  PROMPT_LINE_1+="%b%f${PROMPT_R_QUADR}"
  PROMPT_LINE_1+="$(prompt_nns_padding ${PROMPT_PADDING_SIZE})"
  PROMPT_LINE_1+="${PROMPT_NNS_HYPHEN}"
}



# Needed for a working timer.
function prompt_nns_preexec()
{
  PROMPT_NSS_TIMER_CTRL=1
  PROMPT_NSS_TIMER_START=$(( $(date +%s%0N) / 1000000 ))
}



# Composes the prompt putting everything together.
function prompt_nns_precmd()
{
  # Timer only if needed:
  if [[ 1 == ${PROMPT_NSS_TIMER_CTRL} ]]; then
    PROMPT_NSS_TIMER_ELAPSED=$(( $(date +%s%0N) / 1000000 -
                                 ${PROMPT_NSS_TIMER_START}
                             ))
  fi

  # Local variables:
  local PROMPT_LINE_1

  # May as well keep these:
  setopt noxtrace localoptions extendedglob

  # Input text stype:
  zle_highlight[(r)default:*]="default:fg=green,bold"

  # Compose the top prompt line:
  prompt_nns_compose_top_prompt_line

  # Set the tab's title:
  print -Pn "\e]0;${USER}@${HOST}:%~\a"

  # PS1, default prompt start:
  PS1="${PROMPT_LINE_1}${prompt_newline}${PROMPT_LINE_2}%B"

  # Add in venv info if available AND the console is large enough:
  if [[ ! -z ${VIRTUAL_ENV} ]] && [[ ${COLUMNS} -gt 20 ]]; then
    PS1+="(%F{yellow}venv: ${VIRTUAL_ENV}%F{cyan})"
  fi

  # PS1 default end:
  PS1+="%F{white}${PROMPT_CHAR} %b%f%k"

  # PS2, continuation interactive prompt:
  PS2="${PROMPT_LINE_2}${PROMPT_NNS_BBOX_TO_MBOX}%B%F{white}%_> %b%f%k"

  # PS3, select:
  PS3="${PROMPT_LINE_2}${PROMPT_NNS_BBOX_TO_MBOX}%B%F{white}?# %b%f%k"

  # PS4, tracing:
  PS4="${PROMPT_LINE_2}${PROMPT_NNS_BBOX_TO_MBOX}%B%F{white} %N.%i >"

  # Reset this:
  PROMPT_NSS_TIMER_CTRL=0
}



# Since we got here, setup the prompt:
prompt_nns_setup "$@"

